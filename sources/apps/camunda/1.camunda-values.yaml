# Default values for camunda-bpm-platform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

general:
  debug: false
  replicaCount: 1
  nameOverride: ""
  fullnameOverride: ""

# Set deployment initContainers for any pre-startup proposes.
initContainers: []

image:
  repository: camunda/camunda-bpm-platform
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []
  command: []
  args: []

# Extra environment variables to customize the deployment.
# For more details: https://github.com/camunda/docker-camunda-bpm-platform
extraEnvs: 
# Example:
- name: DB_USERNAME
  value: becamex
- name: DB_PASSWORD
  value: Becamex@2020
# By default H2 database is used, which is handy for demos and tests,
# however, H2 is not supported in a clustered scenario.
# So for real-world workloads, an external database like PostgreSQL should be used.
database:
  driver: com.mysql.cj.jdbc.Driver
  url: jdbc:mysql://192.168.103.161:3306/camunda_engine
  # driver: org.postgresql.Driver
  # url: jdbc:postgresql://postgres-postgresql-headless.kubeapps.svc:5432/process-engine
  credentialsSecretName: camunda-bpm-platform-credentials
  credentialsSecretKeys:
    username: DB_USERNAME
    password: DB_PASSWORD

service:
  type: ClusterIP
  port: 8080
  portName: http

metrics:
  enabled: false
  service:
    type: ClusterIP
    port: 9404
    portName: metrics
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: "/"
      prometheus.io/port: "9404"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# The StartupProbe works with Kubernetes >= 1.6
startupProbe:
  enabled: true
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

readinessProbe:
  enabled: true
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

# An arbitrary use of livenessProbe could make a lot of service interruption, use it wisely.
livenessProbe:
  enabled: false
  config:
    httpGet:
      path: /camunda/
      port: http
    initialDelaySeconds: 120
    periodSeconds: 60

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: camunda.becamex.com.vn
      paths:
        - /
  tls: []
  #  - secretName: camunda-bpm-platform-tls
  #    hosts:
  #      - camunda-bpm-platform.local

podAnnotations: {}

podSecurityContext:
  fsGroup: 1000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # If you do want to specify resources, uncomment the following lines,
  # adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

extraVolumeMounts: []
  # - name: dummy-volume
  #   mountPath: /dummy/volume

extraVolumes: []
  # - name: dummy-volume
  #   hostPath:
  #     path: /tmp/dummy-volume

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

