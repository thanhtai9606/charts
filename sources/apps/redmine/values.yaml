## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Bitnami Redmine image version
## ref: https://hub.docker.com/r/bitnami/redmine/tags/
##
image:
  registry: docker.io
  repository: bitnami/redmine
  tag: 4.1.1-debian-10-r209
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

## String to partially override redmine.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override redmine.fullname template
##
# fullnameOverride:

## Update strategy for Deployments. Set to recreate if persistent volume cannot be mounted to move than one pod.
## Example:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate

## User of the application
## ref: https://github.com/bitnami/bitnami-docker-redmine/#environment-variables
##
redmineUsername: user

## Application password
## Defaults to a random 10-character alphanumeric string if not set
## ref: https://github.com/bitnami/bitnami-docker-redmine#environment-variables
##
# redminePassword:

## Admin email
## ref: https://github.com/bitnami/bitnami-docker-redmine/#environment-variables
##
redmineEmail: user@example.com

## Redmine default data language
## ref: https://github.com/bitnami/bitnami-docker-redmine/#environment-variables
##
redmineLanguage: en

## SMTP mail delivery configuration
## ref: https://github.com/bitnami/bitnami-docker-redmine/#smtp-configuration
##
# smtpHost:
# smtpPort:
# smtpUser:
# smtpPassword:
# smtpTls:

## Use an existing secret with keys "redmine-password" and "smtp-password".
## This ignores both redminePassword and smtpPassword properties.
# existingSecret:

## An array to add extra env vars
## For example:
##
extraEnvVars: []
#  - name: BEARER_AUTH
#    value: true

## ConfigMap with extra environment variables
##
extraEnvVarsCM:

## Secret with extra environment variables
##
extraEnvVarsSecret:

## Extra volumes to add to the deployment
##
extraVolumes: []

## Extra volume mounts to add to the container
##
extraVolumeMounts: []

## Command and args for running the Redmine container (set to default if not set). Use array form
##
command: []
args: []

## Define a disruption budget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
##
podDisruptionBudget:
  enabled: false
  # minAvailable: 1
  # maxUnavailable: 1

## Define the number of pods the deployment will create
## Do not change unless your persistent volume allows more than one writer, ie NFS
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
##
replicas: 1

## SecurityContext configuration
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
containerSecurityContext:
  enabled: false
  runAsUser: 1001
  runAsNonRoot: true

podSecurityContext:
  enabled: true
  fsGroup: 1001

## Redmine containers' resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits: {}
  #  cpu: 2
  #  memory: 1Gi
  requests: {}
  #  cpu: 1
  #  memory: 1Gi

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## Specifies whether a ServiceAccount should be created
  ##
  create: true
  ## The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the redmine.fullname template
  # name:

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext: {}

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Additional pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Additional pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## lifecycleHooks for the Redmine container to automate configuration before or after startup.
##
lifecycleHooks: {}

## Redmine pods' priority.
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
# priorityClassName: ""

## Extra objects to deploy (value evaluated as a template)
##
extraDeploy: []

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## Node labels for pod assignment. Evaluated as a template.
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
##
livenessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

## Custom Liveness probes for Redmine
##
customLivenessProbe: {}

## Custom Rediness probes Redmine
##
customReadinessProbe: {}

## Add init containers to the Redmine pods.
## Example:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: {}

## Add sidecars to the Redmine pods.
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: false
  ## A manually manage Persistent Volume Claim
  ## Requires persistence.enable: true
  ## If defined, PVC must be created manually before volume will be bound
  # existingClaim:

  ## redmine data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessModes:
    - ReadWriteOnce
  size: 8Gi

## Database type. Allowed values: "mariadb" and "postgresql"
## ref: https://github.com/bitnami/bitnami-docker-redmine#run-the-application-using-postgresql-database
##
databaseType: mariadb

## MariaDB chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/mariadb/values.yaml
##
mariadb:
  ## Whether to deploy a mariadb server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: true
  ## Disable MariaDB replication
  replication:
    enabled: false

  ## Use existing secret (ignores root, auth and replication passwords)
  ##
  # existingSecret:

  ## Create a database and a database user
  ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#creating-a-database-user-on-first-run
  ##
  auth:
    database: bitnami_redmine
    username: bn_redmine
    ## If the password is not specified, mariadb will generate a random password
    ##
    # password:

    ## MariaDB admin password
    ## ref: https://github.com/bitnami/bitnami-docker-mariadb/blob/master/README.md#setting-the-root-password-on-first-run
    ##
    # rootPassword:

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  primary:
    persistence:
      enabled: true
      ## mariadb data Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      # storageClass: "-"
      accessMode: ReadWriteOnce
      size: 8Gi

## PostgreSQL chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  ## Whether to deploy a PostgreSQL server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  enabled: false

  ## Create a database and a database user
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/#creating-a-database-on-first-run
  ##
  postgresqlDatabase: bitnami_redmine
  postgresqlUsername: bn_redmine
  ##
  ## If the password is not specified, postgresql will generate a random password
  # postgresqlPassword:

  ## In case of postgresql.enabled = true, allow the usage of existing secrets for postgresql
  ##
  existingSecret: ""

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: true
    ## A manually manage Persistent Volume Claim
    ## Requires postgresql.persistence.enable: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    ## postgresql data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

## All of these values are only used when:
## a) mariadb.enabled is set to false and databaseType=mariadb
## b) postgresql.enabled is set to false and databaseType=postgresql
externalDatabase:
  ## Database host
  host: ""

  ## Database name
  name: bitnami_redmine

  ## Database User
  user: bn_redmine

  ## Database Password
  password: ""

  ## Database port number (use 5432 when using PostgreSQL)
  port: 3306

  ## Use existing secret containing the database password
  ## Must contain the key "postgresql-password" in case that databaseType=postgresql
  ## Must contain the key "mariadb-password" in case that databaseType=mariadb
  # existingSecret:

## Container ports
##
containerPorts:
  http: 3000

## Kubernetes configuration
##   minikube: NodePort
##   ingress: ClusterIP
##   elsewhere: LoadBalancer
##
service:
  type: LoadBalancer
  # HTTP Port
  port: 80
  ## clusterIP: ""
  ## loadBalancerIP for the Redmine Service (optional, cloud specific)
  ## ref: http://kubernetes.io/docs/user-guide/services/#type-loadbalancer
  ## loadBalancerIP:
  ## Control hosts connecting to "LoadBalancer" only
  loadBalancerSourceRanges:
    - 0.0.0.0/0
  ##
  ## nodePorts:
  ##   http: <to set explicitly, choose port between 30000-32767>
  nodePorts:
    http: ""
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster

  ## Control where client requests go, to the same pod or round-robin
  ## Values: ClientIP or None
  ## ref: https://kubernetes.io/docs/user-guide/services/
  sessionAffinity: "None"

## Configure the ingress resource that allows you to access the
## Redmine installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false

  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false

  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: redmine.local

  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations,
  ## please see https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations:
    # kubernetes.io/ingress.class: nginx
    ## Keep the connection open with the API server even if idle (the default is 60 seconds)
    ## Setting it to 10 minutes which should be enough for our current use case of deploying/upgrading/deleting apps
    ##
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"

  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: redmine.local
  ##   path: /

  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - redmine.local
  ##   secretName: redmine.local-tls

  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  secrets: []
  ## - name: redmine.local-tls
  ##   key:
  ##   certificate:

## Configure CronJob scheduler for receiving emails and converting them to tasks
## ref: http://www.redmine.org/projects/redmine/wiki/RedmineReceivingEmails
##
mailReceiver:
  ## Whether to enable scheduled task
  enabled: false

  ## CronJob schedule
  schedule: "*/5 * * * *"

  ## CronJob suspend flag
  suspend: true

  image:
    registry: docker.io
    repository: bitnami/redmine
    tag: 4.1.1-debian-10-r208
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent

  ## Additional pod annotations
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ##
  podAnnotations: {}

  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  ##
  podLabels: {}

  ## Redmine pods' priority.
  ## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  ##
  # priorityClassName: ""

  ## Protocol to use to get emails from configured server.
  ## Supported values are "IMAP" or "POP3"
  mailProtocol: IMAP

  ## Server hostname to connect to
  host: ""

  ## Server TCP port to connect to
  port: 993

  ## Username to authenticate on server
  username: ""

  ## Password to authenticate on server
  password: ""

  ## ssl flag for redmine mail client
  ## If true then client will use SSL/TLS
  ssl: true

  ## starttls flag for redmine mail client
  ## If true then client will use StartTLS
  startTLS: false

  ## IMAP only. Folder to read emails from
  imapFolder: "INBOX"

  ## Folder on mail server to move correctly parsed emails to
  ## If empty - just leave emails as read
  moveOnSuccess: ""

  ## Folder on mail server to move emails with parsing errors to
  ## If empty - just leave emails as read
  moveOnFailure: ""

  ## Action to perform for unknown email sender
  ## ref: http://www.redmine.org/projects/redmine/wiki/RedmineReceivingEmails
  unknownUserAction: ignore

  ## If set to 1 then redmine does not check task creator (source email) permissions for creating a new task
  ## If set to 0 then task creator must have permission to create a new task
  noPermissionCheck: 0

  ## Whether send a just created user (the creator of the task) email about his new account
  ## 0 - send, 1 - not send
  noAccountNotice: 1

  ## Defines a group list to add created user to
  ## Groups must be enumerated as names separated by comma without spaces
  defaultGroup: ""

  ## Defines a project to create a new task in
  project: ""

  ## Defines an email to use as a base for getting project name for a new task
  projectFromSubaddress: ""

  ## Defines a new task status
  status: ""

  ## Defines a new task tracker
  tracker: ""

  ## Defines a new task category
  category: ""

  ## Defines a new task priority
  priority: ""

  ## Defines a new task assignee
  assignedTo: ""

  ## Defines a list of attributes which can be overridden by received email body
  ## "all" means that all attributes can be overridden
  allowOverride: ""

  ## An array to add extra env vars
  ## For example:
  ##
  extraEnvVars: []
  #  - name: BEARER_AUTH
  #    value: true

  ## ConfigMap with extra environment variables
  ##
  extraEnvVarsCM:

  ## Secret with extra environment variables
  ##
  extraEnvVarsSecret:

  ## Extra volumes to add to the deployment
  ##
  extraVolumes: []

  ## Extra volume mounts to add to the container
  ##
  extraVolumeMounts: []

  ## Command and args for running the Redmine container (set to default if not set). Use array form
  ##
  command: ["bash"]
  args: ["-c", "/cj/receive.sh"]

  ## SecurityContext configuration
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
    runAsNonRoot: true

  podSecurityContext:
    enabled: true
    fsGroup: 1001

  ## Add init containers to the Redmine pods.
  ## Example:
  ## initContainers:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  initContainers: {}

  ## Add sidecars to the Redmine pods.
  ## Example:
  ## sidecars:
  ##   - name: your-image-name
  ##     image: your-image
  ##     imagePullPolicy: Always
  ##     ports:
  ##       - name: portname
  ##         containerPort: 1234
  ##
  sidecars: {}

  ## Pod affinity preset
  ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Allowed values: soft, hard
  ##
  podAffinityPreset: ""

  ## Pod anti-affinity preset
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  ## Allowed values: soft, hard
  ##
  podAntiAffinityPreset: soft

  ## Node affinity preset
  ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  ## Allowed values: soft, hard
  ##
  nodeAffinityPreset:
    ## Node affinity type
    ## Allowed values: soft, hard
    ##
    type: ""
    ## Node label key to match
    ## E.g.
    ## key: "kubernetes.io/e2e-az-name"
    ##
    key: ""
    ## Node label values to match
    ## E.g.
    ## values:
    ##   - e2e-az1
    ##   - e2e-az2
    ##
    values: []

  ## Affinity for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
  ##
  affinity: {}

  ## Node labels for pod assignment. Evaluated as a template.
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Tolerations for pod assignment
  ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
##
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    pullSecrets: []
    ##   - myRegistryKeySecretName
  ## Init containers' resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
# global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName
#   storageClass: myStorageClass

## Force target Kubernetes version (using Helm capabilites if not set)
##
kubeVersion:

## Number of Discourse & Sidekiq replicas
## (Note that you will need ReadWriteMany PVCs for this to work properly)
##
replicaCount: 1

## Bitnami Discourse image version
## ref: https://hub.docker.com/r/bitnami/discourse/tags/
##
image:
  registry: docker.io
  repository: bitnami/discourse
  tag: 2.6.0-debian-10-r21
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName
  ## Set to true if you would like to see extra information on logs
  ##
  debug: false

imagePullSecrets: []

## String to partially override discourse.fullname template (will maintain the release name)
##
# nameOverride:

## String to fully override discourse.fullname template
##
# fullnameOverride:

discourse:
  ## Discourse host to create application URLs. The port will be automatilly included.
  ## ref: https://github.com/bitnami/bitnami-docker-discourse#configuration
  ##
  host: 'discourse.becamex.com.vn'
  ## Discourse site name
  ## ref: https://github.com/bitnami/bitnami-docker-discourse#environment-variables
  ##
  siteName: 'My Site!'
  ## User of the application
  ## ref: https://github.com/bitnami/bitnami-docker-discourse#environment-variables
  ##
  username: user
  ## Application password
  ## WARNING: Minimum length of 10 characters
  ## Defaults to a random 10-character alphanumeric string if not set
  ## ref: https://github.com/bitnami/bitnami-docker-discourse#environment-variables
  ##
  password: admin
  ## Name of an existing secret containing the password (ignores previous password)
  ##
  # existingSecret: my-secret
  ## Admin email
  ## ref: https://github.com/bitnami/bitnami-docker-discourse#environment-variables
  ##
  email: dung.lt.cntt@becamex.com.vn

  ## Custom command to override image cmd
  ##
  # command: []

  ## Custom args for the custom command:
  # args: []

  containerSecurityContext: {}
  ## capabilities:
  ##   drop:
  ##   - ALL
  ## readOnlyRootFilesystem: true
  ## runAsNonRoot: true
  ## runAsUser: 1000
  ##

  ## Discourse container's resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  ##  We usually recommend not to specify default resources and to leave this as a conscious
  ##  choice for the user. This also increases chances charts run on environments with little
  ##  resources, such as Minikube. If you do want to specify resources, uncomment the following
  ##  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi

  ## Discourse extra options for liveness and readiness probes
  ## WARNING: Discourse installation process may take up some time and
  ## setting inappropriate values here may lead to pods failure.
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 500
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  ## Custom liveness and readiness probes, it overrides the default one (evaluated as a template)
  ##
  customLivenessProbe: {}
  customReadinessProbe: {}

  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##   discourse:
  ##   - name: DISCOURSE_ELASTICSEARCH_URL
  ##     value: test
  ##
  extraEnvVars: []

  ## Array to add extra configmaps:
  ##
  extraEnvVarsCM: []

  ## Array to add extra environment
  ## variables from a secret:
  ##
  # extraEnvVarsSecret: ""

  ## Additional volume mounts
  ## Example: Mount CA file
  ## extraVolumeMounts
  ##   - name: ca-cert
  ##     subPath: ca_cert
  ##     mountPath: /path/to/ca_cert
  ##
  extraVolumeMounts: []

  ## Do not run the Discourse installation wizard.
  ## Use only in case you are importing an existing database.
  ##
  skipInstall: false

sidekiq:
  containerSecurityContext: {}
  ## capabilities:
  ##   drop:
  ##   - ALL
  ## readOnlyRootFilesystem: true
  ## runAsNonRoot: true
  ## runAsUser: 1000
  ##

  ## Custom command to override image cmd
  ##
  command: ['/app-entrypoint.sh']

  ## Custom args for the custom command:
  ##
  args: ['nami', 'start', '--foreground', 'discourse-sidekiq']

  ## Sidekiq resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}
  ##  We usually recommend not to specify default resources and to leave this as a conscious
  ##  choice for the user. This also increases chances charts run on environments with little
  ##  resources, such as Minikube. If you do want to specify resources, uncomment the following
  ##  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #   limits:
  #     cpu: 100m
  #     memory: 128Mi
  #   requests:
  #     cpu: 100m
  #     memory: 128Mi

  ## Sidekiq extra options for liveness and readiness probes
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 500
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  ## Custom liveness and readiness probes, it overrides the default one (evaluated as a template)
  ##
  customLivenessProbe: {}
  customReadinessProbe: {}

  ## An array to add extra env vars
  ## For example:
  ## extraEnvVars:
  ##   - name: DISCOURSE_ELASTICSEARCH_URL
  ##     value: test
  ##
  extraEnvVars: []

  ## Array to add extra configmaps:
  ##
  extraEnvVarsCM: []

  ## Name of the secret that holds extra
  ## env vars:
  ##
  # extraEnvVarsSecret:

  ## Additional volume mounts
  ## Example: Mount CA file
  ## extraVolumeMounts
  ##   - name: ca-cert
  ##     subPath: ca_cert
  ##     mountPath: /path/to/ca_cert
  ##
  extraVolumeMounts: []

## Additional volumes
## Example: Add secret volume
## extraVolumes:
##  - name: ca-cert
##    secret:
##      secretName: ca-cert
##      items:
##        - key: ca-cert
##          path: ca_cert
##
extraVolumes: []

## Add sidecars to the pod.
## Example:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []

## Add init containers to the pod
##
## e.g.
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##       containerPort: 1234
##
initContainers: []

serviceAccount:
  ## Specifies whether a service account should be created
  ##
  create: false
  ## Annotations to add to the service account
  ##
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:

podSecurityContext: {}
##  fsGroup: 2000
##

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## discourse & sidekiq data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  ##
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  # existingClaim: your-claim
  accessMode: ReadWriteOnce
  size: 10Gi

## Kubernetes configuration
## For minikube, set this to NodePort, elsewhere use LoadBalancer or ClusterIP
##
service:
  type: LoadBalancer
  ## HTTP Port
  ##
  port: 80
  ## Node Ports to expose
  # nodePort:
  ## Use loadBalancerIP to request a specific static IP,
  # loadBalancerIP:
  ## Enable client source IP preservation
  ## ref http://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
  ##
  externalTrafficPolicy: Cluster
  annotations: {}
  ## Limits which cidr blocks can connect to service's load balancer
  ## Only valid if service.type: LoadBalancer
  ##
  loadBalancerSourceRanges: []
  ## Extra ports to expose (normally used with the `sidecar` value)
  # extraPorts:

  ## nodePorts:
  ##   http: <to set explicitly, choose port between 30000-32767>
  ##
  nodePorts:
    http: ''

## Ingress parameters
##
ingress:
  ## Set to true to enable ingress record generation
  ##
  enabled: false
  ## Set this to true in order to add the corresponding annotations for cert-manager
  ##
  certManager: false
  ## When the ingress is enabled, a host pointing to this will be created
  ##
  hostname: discourse.local
  ## Override API Version (automatically detected if not set)
  ##
  apiVersion:

  ## Ingress Path
  ##
  path: /

  ## Ingress Path type
  ##
  pathType: ImplementationSpecific

  ## Ingress annotations done as key:value pairs
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ##
  ## If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  ##
  annotations: {}
  ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
  ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
  ## You can use the ingress.secrets parameter to create this TLS secret or relay on cert-manager to create it
  ##
  tls: false
  ## The list of additional hostnames to be covered with this ingress record.
  ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
  ## extraHosts:
  ## - name: discourse.local
  ##   path: /
  ##
  ## The tls configuration for additional hostnames to be covered with this ingress record.
  ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  ## extraTls:
  ## - hosts:
  ##     - discourse.local
  ##   secretName: discourse.local-tls
  ##
  ## If you're providing your own certificates, please use this to add the certificates as secrets
  ## key and certificate should start with -----BEGIN CERTIFICATE----- or
  ## -----BEGIN RSA PRIVATE KEY-----
  ##
  ## name should line up with a tlsSecret set further up
  ## If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  ##
  ## It is also possible to create and manage the certificates outside of this helm chart
  ## Please see README.md for more information
  ##
  secrets: []
  ## - name: discourse.local-tls
  ##   key:
  ##   certificate:
  ##

## Only really applicable for deployments with RWO PVs attached
## If replicas = 1, an update can get "stuck", as the previous pod remains attached to the
## PV, and the "incoming" pod can never start. Changing the strategy to "Recreate" will
## terminate the single previous pod, so that the new, incoming pod can attach to the PV
## Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  type: RollingUpdate

## Additional pod annotations
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Additional pod labels
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Add labels to all the deployed resources
##
commonLabels: {}

## Add annotations to all the deployed resources
##
commonAnnotations: {}

## Pod affinity preset
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAffinityPreset: ""

## Pod anti-affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
## Allowed values: soft, hard
##
podAntiAffinityPreset: soft

## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
## Allowed values: soft, hard
##
nodeAffinityPreset:
  ## Node affinity type
  ## Allowed values: soft, hard
  ##
  type: ""
  ## Node label key to match
  ## E.g.
  ## key: "kubernetes.io/e2e-az-name"
  ##
  key: ""
  ## Node label values to match
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []

## Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## Node labels for pod assignment
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

##
## PostgreSQL chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/postgresql/values.yaml
##
postgresql:
  ## Whether to deploy a postgresql server to satisfy the applications database requirements. To use an external database set this to false and configure the externalDatabase parameters
  ##
  enabled: true
  ## PostgreSQL user (has superuser privileges if username is `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  postgresqlUsername: bn_discourse
  ## PostgreSQL password
  ## Defaults to a random 10-character alphanumeric string if not set
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#setting-the-root-password-on-first-run
  ##
  # postgresqlPassword:
  ## PostgreSQL admin password (used when `postgresqlUsername` is not `postgres`)
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-user-on-first-run (see note!)
  ##
  postgresqlPostgresPassword: 'bitnami'
  ## Name of existing secret object
  ## The secret should contain the following keys:
  ## postgresql-postgres-password (for the unprivileged user)
  ## postgresql-password (for root user)
  ##
  # existingSecret: my-secret
  ## Create a database
  ## ref: https://github.com/bitnami/bitnami-docker-postgresql/blob/master/README.md#creating-a-database-on-first-run
  ##
  postgresqlDatabase: bitnami_application
  ## PostgreSQL data Persistent Volume Storage Class
  ##
  persistence:
    enabled: true

##
## External database configuration
##
externalDatabase:
  ## Database host
  ##
  host: ''
  ## Database port
  ##
  port: 5432
  ## non-root Username for Discourse Database
  ##
  user: bn_discourse
  ## Database password
  ##
  password: ''
  ## PostgreSQL admin user (used in the installation stage)
  ##
  postgresqlPostgresUser: ''
  ## PostgreSQL admin password (used in the installation stage)
  ##
  postgresqlPostgresPassword: ''
  ## Name of existing secret object
  ## The secret should contain the following keys:
  ## postgresql-postgres-password (for the unprivileged user)
  ## postgresql-password (for root user)
  ##
  # existingSecret: my-secret
  ## Database name
  ##
  database: bitnami_application

## Redis(TM) chart configuration
##
## https://github.com/bitnami/charts/blob/master/bitnami/redis/values.yaml
##
redis:
  ## Whether to deploy a redis server to satisfy the applications requirements. To use an external redis instance set this to false and configure the externalRedis parameters
  ##
  enabled: true
  ## Use password authentication
  ##
  usePassword: false
  ## Redis(TM) password (both master and slave)
  ## Defaults to a random 10-character alphanumeric string if not set and usePassword is true.
  ## It should always be set using the password value or in the existingSecret to avoid issues
  ## with Discourse.
  ## The password value is ignored if existingSecret is set
  # password:
  ##
  ## Name of existing secret object containing the password
  ##
  existingSecret:
  ##
  ## Password key to be retrieved from Redis(TM) secret
  ##
  existingSecretPasswordKey: 'redis-password'
  ##
  ## Cluster settings
  ##
  cluster:
    enabled: false

  ##
  ## Redis(TM) Master parameters
  ##
  master:
    persistence:
      enabled: true

##
## External Redis(TM)
##
externalRedis:
  ## Redis(TM) host
  ##
  host: ''
  ## Redis(TM) port
  ##
  port: 6379
  ## Redis(TM) password for authentication
  ## Ignored if existingSecret is set
  ##
  password: ''
  ##
  ## Name of existing secret object containing the password
  ##
  existingSecret:
  ##
  ## Password key to be retrieved from Redis(TM) secret
  ##
  existingSecretPasswordKey: 'redis-password'
ave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ##
    limits: {}
    ##   cpu: 100m
    ##   memory: 128Mi
    ##
    requests: {}
    ##   cpu: 100m
    ##   memory: 128Mi
    ##

# Add custom certificates and certificate authorities to redmine container
certificates:
  customCertificate:
    certificateSecret: ""
    chainSecret: {}
    # name: secret-name
    # key: secret-key
    certificateLocation: /etc/ssl/certs/ssl-cert-snakeoil.pem
    keyLocation: /etc/ssl/private/ssl-cert-snakeoil.key
    chainLocation: /etc/ssl/certs/mychain.pem
  customCA: []
  # - secret: custom-CA
  # - secret: more-custom-CAs
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    # pullPolicy:
    # pullSecrets
    #   - myRegistryKeySecretName
  extraEnvVars: []
  # - name: myvar
  #   value: myval
